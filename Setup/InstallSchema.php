<?php
declare(strict_types=1);

namespace Threecommerce\Maintenance\Setup;

use Magento\Framework\DB\Ddl\Table;
use Magento\Framework\Setup\InstallSchemaInterface;
use Magento\Framework\Setup\ModuleContextInterface;
use Magento\Framework\Setup\SchemaSetupInterface;

class InstallSchema implements InstallSchemaInterface
{
    public function install(SchemaSetupInterface $setup, ModuleContextInterface $context)
    {
        $installer = $setup;
        $installer->startSetup();
        $tableName = $installer->getTable('3com_maintenance_ip');
        if ($installer->getConnection()->isTableExists($tableName) != true) {
            $table = $installer->getConnection()
                ->newTable($tableName)
                ->addColumn(
                    'id',
                    Table::TYPE_INTEGER,
                    null,
                    ['identity' => true, 'unsigned' => true, 'nullable' => false, 'primary' => true],
                    'Id'
                )->addColumn(
                    'ip',
                    Table::TYPE_TEXT,
                    null,
                    ['nullable' => true, 'default' => ''],
                    'ip'
                )
                ->setComment('Tabella con gli ip da escludere dalla Maintenance mode')
                ->setOption('type', 'InnoDB')
                ->setOption('charset', 'utf8');
            $connection = $installer->getConnection();
            $connection->createTable($table);
            $identifier = 'sito-in-manutenzione';
            $data = array(
                'title' => 'Sito in manutenzione',
                'page_layout' => 'empty',
                'identifier' => $identifier,
                'content' => '<div data-content-type=\"html\" data-appearance=\"default\" data-element=\"main\">sito in manutenzione</div>',
                'is_active' => 1
            );
            $connection->insert('cms_page', $data);
            $pageId = $connection->fetchOne("select page_id from cms_page where identifier = '$identifier'");
            $listStore = $connection->fetchAll("select store_id from store where store_id > 0");
            foreach ($listStore as $store) {
                $dataStore = array(
                    'page_id' => $pageId,
                    'store_id' => $store['store_id']
                );
                $connection->insert('cms_page_store', $dataStore);
                $dataPage = array(
                    'entity_type' => 'cms-page',
                    'entity_id' => $pageId,
                    'request_path' => $identifier,
                    'target_path' => 'cms/page/view/page_id/' . $pageId,
                    'redirect_type' => 0,
                    'store_id' => $store['store_id'],
                    'is_autogenerated' => 1
                );
                $connection->insert('url_rewrite', $dataPage);
            }
        }
        $setup->endSetup();
    }
}
